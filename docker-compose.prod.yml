version: '3.8'

# Production override for docker-compose.yml
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  # Production database configurations
  mongodb:
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./database/mongo-init:/docker-entrypoint-initdb.d:ro
      - ./database/mongo-prod-init:/docker-entrypoint-initdb.d/prod:ro
    command: mongod --auth --bind_ip_all --logpath /var/log/mongodb/mongod.log --logappend --quiet
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  neo4j:
    restart: always
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME}/${NEO4J_PASSWORD}
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*
      NEO4J_dbms_memory_heap_initial__size: ${NEO4J_HEAP_INITIAL:-1G}
      NEO4J_dbms_memory_heap_max__size: ${NEO4J_HEAP_MAX:-2G}
      NEO4J_dbms_memory_pagecache_size: ${NEO4J_PAGECACHE:-1G}
      NEO4J_dbms_logs_query_enabled: "true"
      NEO4J_dbms_logs_query_threshold: "1s"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_conf:/conf
      - ./database/neo4j-init:/var/lib/neo4j/import:ro
      - ./database/neo4j-prod-init:/var/lib/neo4j/prod-import:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --save 900 1 --save 300 10 --save 60 10000 --maxmemory ${REDIS_MAX_MEMORY:-512mb} --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production application services
  backend:
    build:
      target: production
    restart: always
    environment:
      - PORT=${BACKEND_PORT:-8080}
      - MONGO_URI=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=${NEO4J_USERNAME}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - REDIS_URI=redis://:${REDIS_PASSWORD}@redis:6379
      - AI_SERVICE_URL=http://ai-service:8000
      - JWT_SECRET=${JWT_SECRET}
      - DEVVIT_SUBREDDIT=${DEVVIT_SUBREDDIT}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - GIN_MODE=release
    deploy:
      replicas: ${BACKEND_REPLICAS:-2}
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  ai-service:
    build:
      target: production
    restart: always
    environment:
      - PORT=${AI_SERVICE_PORT:-8000}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=${NEO4J_USERNAME}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - AI_MODEL_PROVIDER=${AI_MODEL_PROVIDER:-openai}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PYTHONPATH=/app
    deploy:
      replicas: ${AI_SERVICE_REPLICAS:-2}
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Production monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    container_name: dumdoors-prometheus
    restart: always
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - dumdoors-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: dumdoors-grafana
    restart: always
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - dumdoors-network
    profiles:
      - monitoring

  # Reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: dumdoors-nginx
    restart: always
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - ai-service
    networks:
      - dumdoors-network
    profiles:
      - proxy

volumes:
  prometheus_data:
  grafana_data:
  nginx_logs: